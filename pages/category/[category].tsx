import React from 'react'
import Head from 'next/head'
import Tabs from '../../components/Tabs'
import { GetServerSideProps, NextPage } from 'next'
import { AxiosResponse } from 'axios';
import { fetchCategories, fetchArticles } from '../../http'
import { ICollectionResponse, ICategory, IPagination, IArticle } from '../../types'
import qs from 'qs'
import ArticleList from '../../components/ArticleList'
import { makeCategory, capitalizeFirstLetter } from '../../utils';

interface IPropTypes {
  categories: {
    items: ICategory[],
    pagination: IPagination
  },
  articles: {
    items: IArticle[],
    pagination: IPagination
  },
  slug: string;
}

const category: NextPage<IPropTypes> = ({categories, articles, slug}) => {

  const formatCategory = () => {
    return capitalizeFirstLetter(makeCategory(slug))
  }
  return (
    <>
      <Head>
        <title>Coder's Blog Details {formatCategory()}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs categories={categories.items}/>
      <ArticleList articles={articles.items}/>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({query}) => {
  const options = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    filters: {
      category: {
        slug: query.category
      }
    }
  }

  const queryString = qs.stringify(options)
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString);

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()

  return {
    props: {
      categories: {
        items: categories.data,
        pagination: categories.meta.pagination
      },
      articles: {
        items: articles.data,
        pagination: categories.meta.pagination
      },
      slug: query.category
    }
  }
}

export default category